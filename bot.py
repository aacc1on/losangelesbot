import nest_asyncio
import asyncio
import logging
import re
import pathlib
from telegram import Update, MessageEntity
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

logging.basicConfig(level=logging.INFO)

TOKEN = "7676730172:AAFi2nwDQpCGAU6jH0TLewGsezxofoB4PsQ"
GROUP_CHAT_ID = -1001890799008

BASE_DIR = pathlib.Path(__file__).parent.resolve()
SECOND_AD_IMAGE_PATH = BASE_DIR / "second_ad_banner.jpg"
FOURTH_AD_IMAGE_PATH = BASE_DIR / "fourth_ad_banner.jpg"
FIFTH_AD_IMAGE_PATH = BASE_DIR / "fifth_ad_banner.jpg"  # üÜï –¥–æ–±–∞–≤–ª–µ–Ω–æ

CUSTOM_EMOJI_IDS = ["5206607081334906820", "5355012477883004708"]
PREMIUM_ADMINS = [6589844779]

bot_id = None

first_law_text = (
    "üîî ’à÷Ç’∑’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ üîî  \n"
    "‚ÄºÔ∏è ‘Ω’¥’¢’´ ’Ø’°’∂’∏’∂’∂’•÷Ä’® ‚ÄºÔ∏è \n\n"
    "1Ô∏è‚É£ ‘≥÷Ä’•÷Ñ ’∞’°’µ’•÷Ä’•’∂ ’Ø’°’¥ ’¨’°’ø’´’∂’°’ø’°’º  \n"
    "2Ô∏è‚É£ ’â’ø’°÷Ä’°’Æ’•’¨ ’∏÷Ç÷Ä’´’∑ ’≠’¥’¢’•÷Ä\n"
    "3Ô∏è‚É£ ’Ä’°÷Ä’£’•’¨ ’≠’¥’¢’´ ’¢’∏’¨’∏÷Ä ’°’∂’§’°’¥’∂’•÷Ä’´’∂\n"
    "4Ô∏è‚É£ ’î’°’≤’°÷Ñ’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’π÷Ñ’∂’∂’°÷Ä’Ø’•’¨\n"
    "5Ô∏è‚É£ ‘ø÷Ä’´’¥’´’∂’°’¨ ’∫’∏’Ω’ø’•÷Ä’® ’°÷Ä’£’•’¨’æ’∏÷Ç’¥ ’ß\n"
    "6Ô∏è‚É£ ’ë’°’∂’Ø’°÷Å’°’Æ ’£’∏’Æ’∏÷Ç’∂’•’∏÷Ç’©’µ’°’∂ ’£’∏’æ’°’¶’§’®, ’∏÷Ä’´÷Å ’•’Ø’°’¥’∏÷Ç’ø ’•÷Ñ ’°’Ø’∂’Ø’°’¨’∏÷Ç’¥, ’¢’°÷Å’´ ’Å’•÷Ä ’°’∂’±’∂’°’Ø’°’∂ ’´÷Ä’•÷Ä’´ ’æ’°’≥’°’º÷Ñ’´÷Å ’Ø’°’¥ ’æ’°÷Ä’±’°’Ø’°’¨’∏÷Ç’©’µ’°’∂ ’∞’°’∂’±’∂’•’¨’∏÷Ç÷Å ’æ’≥’°÷Ä’∏’æ’´ ’ß, ’£’∏’æ’°’¶’§’´ ’∞’°’¥’°÷Ä ’Ø’°’∫’∂’æ’•÷Ñ @losangelosadmin"
)

SECOND_AD_TEXT = """‘≤’°÷Ä÷á ’Å’•’¶   
üöò ‘µ’©’• ’∏÷Ç’∂’•÷Å’•’¨ ’•÷Ñ ’°’æ’ø’∏’æ’©’°÷Ä ’∞’°’¥’•÷Å’•÷Ñ ’´’¥ Body Shop :
‚úÖ  ‘±÷Ä’ø’°÷Ñ’´’∂ ’§’•÷Ü’∏÷Ä’¥’°÷Å’´’° (Body Work)
‚úÖ  ’Ü’•÷Ä’Ø’∏÷Ç’¥ (Paint)
‚úÖ ’ì’∏’¨’´’∑ (Polish)
‚úÖ  ‘∏’∂’©’°÷Å÷Ñ’°’µ’´’∂ ’¥’°’Ω’•÷Ä’´ ’æ’•÷Ä’°’∂’∏÷Ä’∏’£’∏÷Ç’¥ (Suspension)
‚úÖ  ‘ª÷Ä’°’æ’°’¢’°’∂’°’Ø’°’∂ ÷Ö’£’∂’∏÷Ç’©’µ’∏÷Ç’∂
üìû 7475995550, 7473085876
üì± https://www.instagram.com/_carprof_
"""

FOURTH_AD_TEXT = (
    "‚ùáÔ∏è’Ñ’•÷Ä  ’°’Ø’°’§’•’¥’´’°’∂ ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’¥ ’ß ’ï’∂’¨’°’µ’∂  ‘±’¥’•÷Ä’´’Ø’µ’°’∂ ‘±’∂’£’¨’•÷Ä’•’∂’´ ’§’°’Ω’•÷Ä ’±’•÷Ä ÷Å’°’∂’Ø’°÷Å’°’Æ ’æ’°’µ÷Ä’´÷Å ÷á ÷Å’°’∂’Ø’°÷Å’°’Æ ’™’°’¥’´‚ùáÔ∏è\n"
    "‚úîÔ∏è’ç’∏’æ’∏÷Ä’•÷Ñ ’∂’∏÷Ä’°’£’∏÷Ç’µ’∂ ’¥’•’©’∏’§’∂’•÷Ä’∏’æ ÷á ’°÷Ä’°’£ \n"
    "‚úîÔ∏è‘Ω’∏’Ω’°’Ø÷Å’°’Ø’°’∂ ‘±’¥’•÷Ä’´’Ø’µ’°’∂ ‘±’∂’£’¨’•÷Ä’•’∂\n"
    "‚úîÔ∏è’Ä’∂’°÷Ä’°’æ’∏÷Ä ÷á ’°’∂’∞’∂’°÷Ä ’¥’•’©’∏’§’∂’•÷Ä ’°÷Ä’°’£ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ ’∏÷Ç’∂’•’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä\n"
    "’Ä’°÷Ä÷Å’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’Ø’°’∫’∂’æ’•÷Ñ @elevate_academy1"
)

FIFTH_AD_TEXT = (  # üÜï –¥–æ–±–∞–≤–ª–µ–Ω–æ
    "‘≤’°÷Ä÷á ’Å’•’¶üëã\n"
    "‚ÄºÔ∏è’Ñ’•’∂÷Ñ ’ø÷Ä’°’¥’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’•÷Ä’°’∑’≠’°’æ’∏÷Ä’æ’°’Æ ’á’•’∂’£’•’∂’µ’°’∂ ’æ’´’¶’°’∂’•÷Ä 1-5 ’ø’°÷Ä’´ ’™’°’¥’Ø’•’ø’∏’æ’ù ’°’º’°’∂÷Å ’¥’•÷Ä’™’¥’°’∂, "
    "’¢’∏’¨’∏÷Ä ’Ä’Ä ÷Ñ’°’≤’°÷Ñ’°÷Å’´’∂’•÷Ä’´’∂, ’∏’æ÷Ñ’•÷Ä ’∏÷Ç’∂’•’∂ ’Ø’°’∂’°’π ÷Ñ’°÷Ä’ø ’Ø’°’¥ ’™’°’¥’°’∂’°’Ø’°’æ’∏÷Ä’°’∫’•’Ω ’¢’∂’°’Ø’æ’∏÷Ç’¥ ’•’∂ ‘ø’°’¨’´÷Ü’∏’º’∂’´’° ’∂’°’∞’°’∂’£’∏÷Ç’¥÷â "
    "’Ä’°÷Ä÷Å’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥’ù\n"
    "Telegram @SCHENGEN_G\n"
    "WhatsApp +1 424 278 89 41‚ÄºÔ∏è"
)


def build_premium_ad(is_premium=False):
    text = (
        "üì∫ First Stream TV\n"
        "‚úÖ  16,000+ ’°’¨’´÷Ñ’∂’•÷Ä\n"
        "‚úÖ  ’ñ’´’¨’¥’•÷Ä ‚Ä¢ ’ç’•÷Ä’´’°’¨’∂’•÷Ä ‚Ä¢ ’ç’∫’∏÷Ä’ø\n"
        "‚úÖ  ’Ä’°’Ω’°’∂’•’¨’´ ’ß ’¢’∏’¨’∏÷Ä ’Ω’°÷Ä÷Ñ’•÷Ä’∏÷Ç’¥\n"
        "üí∏ ’á’°’ø ’¥’°’ø’π’•’¨’´ ’£’´’∂\n\n"
        "‚úÖ Netflix\n‚úÖ Match TV\n‚úÖ Fast Sports TV\n‚úÖ Discovery\n‚úÖ National Geographic\n"
        "üì≤ ‘ø’°’∫’ù @vahekarapetyan10"
    )
    entities = []
    if is_premium:
        idx = 0
        emoji_index = 0
        while True:
            pos = text.find("‚òë", idx)
            if pos == -1:
                break
            custom_id = CUSTOM_EMOJI_IDS[emoji_index % len(CUSTOM_EMOJI_IDS)]
            entities.append(MessageEntity(type="custom_emoji", offset=pos, length=1, custom_emoji_id=custom_id))
            idx = pos + 1
            emoji_index += 1
    return text, entities


async def is_user_admin_or_owner(update: Update, user_id: int) -> bool:
    if user_id in PREMIUM_ADMINS:
        return True
    try:
        member = await update.effective_chat.get_member(user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‘≤’°÷Ä÷á! ‘µ’Ω ‘º’∏’Ω ‘±’∂’ª’•’¨’•’Ω ’Ä’°’µ’•÷Ä ’≠’¥’¢’´ ’¢’∏’ø’∂ ’•’¥ üòä")


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "’Ä÷Ä’°’¥’°’∂’∂’•÷Ä:\n"
        "/premiumtest ‚Äî ’∫÷Ä’•’¥’´’∏÷Ç’¥ ’£’∏’æ’°’¶’§’´ ÷É’∏÷Ä’±\n"
        "/getemojiid ‚Äî ’Ω’ø’°’∂’°’¨ emoji ID\n"
        "/debugad ‚Äî ’Ω’ø’∏÷Ç’£’•’¨ ’£’∏’æ’°’¶’§’´ ’∂’Ø’°÷Ä’®\n"
        "/testlaw ‚Äî ÷É’∏÷Ä’±’•’¨ ’Ø’°’∂’∏’∂’∂’•÷Ä’®\n"
        "/sendsecondad ‚Äî ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 2-÷Ä’§ ’£’∏’æ’°’¶’§\n"
        "/sendfourthad ‚Äî ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 4-÷Ä’§ ’£’∏’æ’°’¶’§ (‘±’∂’£’¨’•÷Ä’•’∂ ’§’°’Ω’•÷Ä)\n"
        "/sendfifthad ‚Äî ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 5-÷Ä’§ ’£’∏’æ’°’¶’§ (’á’•’∂’£’•’∂’µ’°’∂ ’æ’´’¶’°’∂’•÷Ä)\n"
        "/del ‚Äî ’ª’∂’ª’•’¨ ’°’µ’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®, ’∏÷Ä’´ ’∫’°’ø’°’Ω’≠’°’∂’´’∂ ’§’∏÷Ç÷Ñ ’£÷Ä’∏÷Ç’¥ ’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’®"
    )


async def premiumtest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_premium = user_id in PREMIUM_ADMINS or (update.effective_user.is_premium or False)
    text, entities = build_premium_ad(is_premium=is_premium)
    await update.message.reply_text(text=text)


async def getemojiid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ids = [e.custom_emoji_id for e in update.message.entities if e.type == "custom_emoji"] if update.message.entities else []
    await update.message.reply_text("ID-’∂’•÷Ä:\n" + "\n".join(ids) if ids else "’â’£’ø’° custom emoji.")


async def debugad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("’Ü’Ø’°÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥: (‘±’º’°’ª’´’∂ ’£’∏’æ’°’¶’§’® ’ª’∂’ª’æ’°’Æ ’ß)")


async def testlaw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_first_law(context.application)
    await update.message.reply_text("‚úÖ ‘ø’°’∂’∏’∂’∂’•÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å’´’∂")


async def publish_second_ad_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_second_ad(context.application)
    await update.message.reply_text("‚úÖ ‘µ÷Ä’Ø÷Ä’∏÷Ä’§ ’£’∏’æ’°’¶’§’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å")


async def publish_fourth_ad_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_fourth_ad(context.application)
    await update.message.reply_text("‚úÖ ’â’∏÷Ä÷Ä’∏÷Ä’§ ’£’∏’æ’°’¶’§’® (‘±’∂’£’¨’•÷Ä’•’∂ ’§’°’Ω’•÷Ä) ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å")


async def publish_fifth_ad_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_fifth_ad(context.application)
    await update.message.reply_text("‚úÖ ’Ä’´’∂’£’•÷Ä’∏÷Ä’§ ’£’∏’æ’°’¶’§’® (’á’•’∂’£’•’∂’µ’°’∂ ’æ’´’¶’°’∂’•÷Ä) ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å")


async def delete_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_id
    user_id = update.effective_user.id

    if user_id != bot_id and not await is_user_admin_or_owner(update, user_id):
        await update.message.reply_text("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –±–æ—Ç –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(
            "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∫’°’ø’°’Ω’≠’°’∂’•÷Ñ ’°’µ’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂’®, ’∏÷Ä’® ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’ª’∂’ª’•’¨, "
            "÷á ’∂’∏÷Ä’´÷Å ’£÷Ä’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’®÷â"
        )
        return

    chat_id = update.effective_chat.id
    msg_to_delete_id = update.message.reply_to_message.message_id
    cmd_msg_id = update.message.message_id

    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=msg_to_delete_id)
        await context.bot.delete_message(chat_id=chat_id, message_id=cmd_msg_id)
        logging.info(f"Message {msg_to_delete_id} deleted by user {user_id}")
    except Exception as e:
        logging.error(f"Failed to delete message {msg_to_delete_id} by user {user_id}: {e}")


async def publish_first_law(application):
    await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=first_law_text)


async def publish_second_ad(application):
    if SECOND_AD_IMAGE_PATH.is_file():
        with SECOND_AD_IMAGE_PATH.open("rb") as f:
            await application.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=f, caption=SECOND_AD_TEXT)
    else:
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=SECOND_AD_TEXT)


async def publish_fourth_ad(application):
    if FOURTH_AD_IMAGE_PATH.is_file():
        with FOURTH_AD_IMAGE_PATH.open("rb") as f:
            await application.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=f, caption=FOURTH_AD_TEXT)
    else:
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=FOURTH_AD_TEXT)


async def publish_fifth_ad(application):
    if FIFTH_AD_IMAGE_PATH.is_file():
        with FIFTH_AD_IMAGE_PATH.open("rb") as f:
            await application.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=f, caption=FIFTH_AD_TEXT)
    else:
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=FIFTH_AD_TEXT)


async def publish_both_ads(application):
    await publish_second_ad(application)


link_pattern = re.compile(r"((https?:\/\/)?(t\.me|telegram\.me|telegram\.dog)\/\S+)|(tg:\/\/\S+)", re.IGNORECASE)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = (update.message.text or "") + " " + (update.message.caption or "")

    if link_pattern.search(text):
        try:
            await update.message.delete()
            logging.info(f"Deleted message {update.message.message_id} from {update.effective_user.id} containing telegram or https link.")
        except Exception as e:
            logging.error(f"Failed to delete message {update.message.message_id}: {e}")


async def main():
    global bot_id
    application = ApplicationBuilder().token(TOKEN).build()

    me = await application.bot.get_me()
    bot_id = me.id

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("premiumtest", premiumtest))
    application.add_handler(CommandHandler("getemojiid", getemojiid))
    application.add_handler(CommandHandler("debugad", debugad))
    application.add_handler(CommandHandler("testlaw", testlaw))
    application.add_handler(CommandHandler("sendsecondad", publish_second_ad_cmd))
    application.add_handler(CommandHandler("sendfourthad", publish_fourth_ad_cmd))
    application.add_handler(CommandHandler("sendfifthad", publish_fifth_ad_cmd))
    application.add_handler(CommandHandler("del", delete_message_handler))

    application.add_handler(MessageHandler(filters.ALL & (~filters.StatusUpdate.ALL), handle_message))

    arm_timezone = timezone("Asia/Yerevan")
    scheduler = AsyncIOScheduler(timezone=arm_timezone)
    scheduler.add_job(publish_first_law, "cron", hour=9, minute=0, args=[application])
    scheduler.add_job(publish_both_ads, "cron", hour=11, minute=0, args=[application])
    scheduler.add_job(publish_fourth_ad, "cron", hour=12, minute=0, args=[application])
    scheduler.add_job(publish_fifth_ad, "cron", hour=14, minute=0, args=[application])  # üïë 14:00 –ø–æ –ï—Ä–µ–≤–∞–Ω—É
    scheduler.add_job(publish_fifth_ad, "cron", hour=22, minute=0, args=[application])  # üåô 22:00 –ø–æ –ï—Ä–µ–≤–∞–Ω—É
    scheduler.start()

    await application.run_polling()


if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
